import sys
import math
from enum import Enum

PROGRESS_SIZE = 20
PROGRESS_CHAR_DONE = '#'
PROGRESS_CHAR_FILL = '.'

class LoggerColor(Enum):

    CYAN_BOLD = '\x1b[1;36m'
    GREEN_BOLD = '\x1b[1;32m'
    GREY_BOLD = '\x1b[38;21m'
    RED_BOLD = '\x1b[1;31m'
    YELLOW_BOLD = '\x1b[1;33m'
    RESET = '\x1b[0m'

class Logger():

    @staticmethod
    def error(msg, new_line=True) -> None:
        msg = "{}[-]{} {}".format(LoggerColor.RED_BOLD.value, LoggerColor.RESET.value, msg)
        Logger.__print(msg, new_line)

    @staticmethod
    def warning(msg, new_line=True) -> None:
        msg = "{}[!]{} {}".format(LoggerColor.YELLOW_BOLD.value, LoggerColor.RESET.value, msg)
        Logger.__print(msg, new_line)

    @staticmethod
    def info(msg, new_line=True) -> None:
        msg = "{}[*]{} {}".format(LoggerColor.CYAN_BOLD.value, LoggerColor.RESET.value, msg)
        Logger.__print(msg, new_line)

    @staticmethod
    def success(msg, new_line=True) -> None:
        msg = "{}[+]{} {}".format(LoggerColor.GREEN_BOLD.value, LoggerColor.RESET.value, msg)
        Logger.__print(msg, new_line)

    @staticmethod
    def reset_line(pad=0) -> None:
        print("\r{}\r".format(' ' * (pad + 4)), end='', flush=True)

    @staticmethod
    def __print(msg, new_line=True) -> None:
        print("\r{}".format(msg), end='\n' if new_line else '', flush=True)

    @staticmethod
    def show_progress(i, total) -> int:
        nb_done = math.floor(i * PROGRESS_SIZE / total)
        nb_rest = math.ceil((total - i) * PROGRESS_SIZE / total)
        progress = "[{}{}] {}/{} ({}%)".format(PROGRESS_CHAR_DONE * nb_done, PROGRESS_CHAR_FILL * nb_rest, i, total, i * 100 // total)
        print(progress, end='', flush=True)
        return len(progress)
