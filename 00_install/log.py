import sys
from enum import Enum

class LoggerColor(Enum):

    CYAN_BOLD = '\x1b[1;36m'
    GREEN_BOLD = '\x1b[1;32m'
    GREY_BOLD = '\x1b[38;21m'
    RED_BOLD = '\x1b[1;31m'
    YELLOW_BOLD = '\x1b[1;33m'
    RESET = '\x1b[0m'

class Logger():

    @staticmethod
    def error(msg, new_line=True):
        msg = "{}[-]{} {}".format(LoggerColor.RED_BOLD.value, LoggerColor.RESET.value, msg)
        Logger.__print(msg, new_line)

    @staticmethod
    def warning(msg, new_line=True):
        msg = "{}[!]{} {}".format(LoggerColor.YELLOW_BOLD.value, LoggerColor.RESET.value, msg)
        Logger.__print(msg, new_line)

    @staticmethod
    def info(msg, new_line=True):
        msg = "{}[*]{} {}".format(LoggerColor.CYAN_BOLD.value, LoggerColor.RESET.value, msg)
        Logger.__print(msg, new_line)

    @staticmethod
    def success(msg, new_line=True):
        msg = "{}[+]{} {}".format(LoggerColor.GREEN_BOLD.value, LoggerColor.RESET.value, msg)
        Logger.__print(msg, new_line)

    @staticmethod
    def reset_line(pad=0):
        sys.stdout.write("\r{}\r".format(' ' * (pad + 4)))

    @staticmethod
    def __print(msg, new_line=True):
        sys.stdout.write("{}{}".format(msg, '\n' if new_line else '\r'))
